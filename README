часть I Введение

Storage_server - это сервис, который обеспечивает хранение данных. 
Хранение построено на основе HashTable ( доступ за O(1) )  : доступ к данным осуществляется по ключу.
Ключ является составным и представляет собой строку, состоящую из префикса и собственно тело самого ключа. 
Префикс показывает номер типа данных, всегда число. 
Тело ключа, является число uint_32, взято за основу, как crc - т.к. соответсвует ID полдьзлвателя.
Префикс и тело ключа разделены точкой. Пример ключей: 1.3453243 или 2.553224
 
Следующие типы данных используются:
COUNTER - счетчик, всегда числовое поле, uint_32
INDEX - индекс, набор ссылок на другие ключи, предасьта 
DATA - произвольные данные, возможно использовать строки.

Storage_server в качестве протокола обмена использкет memcached протокол. Это позволяет использовать существующие клиентские библиотеки (libmemcached)

В Storage_server зарезервированы следующие номера типов данных:
>show types
1 INDEX
2 COUNTER

Их нельзя удалить, они не могут быть изменены. Они всегда появляются по умолчанию при создании нового сервиса.



часть III Особенности реализации

2.1 Извлечение и запись данных

осуществляется командами get/set
Пример:

запись в ключ 2.1
set 2.1 0 0 1
1
>STORED

изъятие данных по ключу 2.1
get 2.1
>VALUE 2.1 0 1
>1
>END

Записать в счетчик (тип данных COUNTER) строку не получится, выдастся ошибка.
Записать в индекс (тип данных INDEX) можно любые данные, но это не рекомендуется.

ПРИМЕЧАНИЕ:
мульти сет/гет пока не реализован.
предполагается реализовать для счетчиков и данных. 


2.2 Инкрементация данных 

поддерживается только для типов INDEX и COUNTER.
Для типа COUNTER - происходит увеличение счетчика, возвращается новое значение. 
Если счетчик не существовал, то он создастся.
Возможно инкрементировать на любое число (с отрицательным получится декремент)

Пример:
incr 2.1 2
>5
incr 2.1 -1
>4


ВНИМАНИЕ!
Операция инкремент реализована только для индекса префиксом = 1 выполнение операции.
при этом инкрементируются все счетчики с префиксом = 2, ключи которых содержатся в данных. 

Это ограничение временное, более гибкая реализация в разработке.

Пример:
Пусть индекс 1.1 содержит следующие ключи: 2, 3, 5, 7
при выполнении операции инкремент, увеличит не счетчик 2.1, 
а счетчики которые содержатся в данных индекса: 2.2, 2.3, 2.5, 2.7
Если счетчик не существовал, то он создастся.


2.3 Удаление данных

аналогияно memcached для любого типа данных
Пример:
delete 2.1 
>DELETED
delete 2.1 
>NOT_FOUND  Если нет необходимого ключа, выдается данное сообщение (двойное удаление)


Добавление и удаление данных в определенный ключ: append/prepend
Команды append/prepend используются только для типов данных INDEX и DATA.

Для типа DATA команды append и prepend работают так же как и для memcached:
добавляют данные в конец/начало существующих данных.

Для типа INDEX - в качестве данных используется составные данные: ключ и признак,
разделенные пробелом. Ключ - это некий crc, признак - это некоторые данные uint_32.
ПРИМЕЧАНИЕ - возможно данный функционал избыточен, кандидат на отсечение. Предполагалось на признак можно навешать некоторую логику.

append - добавляет новый ключ в индекс, prepend удаляет.

Пример: добавление в индекс ключа 2 с признаком 0
append 1.1 0 0 3
2 0
>STORED
 
 
часть II Прочие команды

stats - выдача статистики, пока только:
>STAT connectionss 1

Предполагается: статистика ошибок errors,
статистика  miss, get, set
занимаемое место под файл данных
производительность: кол-во запросов в сек, ср за посл 5 мин
ср. время отработки запроса


flush_all - сброс всех данных.

quit - закрытие коннекции

term - завершение работы сервера

Добавление и удаление типов данных.

Существующие типы данных можно посмотреть командой:
show types
>1 INDEX
>2 COUNTER
>3 DATA
>4 COUNTER

Добавляются новые типы через конфигурационный файл.


Экспериментальная команда reopen - переоткрывает файлы данных
reopen
>OK


часть IV Технические детали

4.1 Сигналы 
Storage_server - обрабатывает сигналы:
HUP - переоткрывает файлы, в том числе и лог
TERM - мягкое завершение

4.2 Параметры командной строки

 ./storage_server --help
Usage: storage_server [options]
default port: (null)
Options are:
  -n, --max-clients=limit maximum number of open files (like ulimit -n)
  -V, --version           show version
  -h, --help              this help message
  -c configfile           config filename or config.ini in the current dir
  -t                          trace commands

Опция -n принципиально не нужна, будет ликвидирована, ограничивает максимальное подключение клиентов до 1024 (rlimit).
Опция -c (имя и полный путь до конфигурационного файла) задается в случае, если конфигурационный файл не лежит рядом с исполняемым.
По умолчанию используется имя config.ini
Опция -t трассировка, выводит в stdout все переданные команды. Используется только при консольном режиме [daemon=0]

Параметры конфигурационного файла см в файле INSTALL




